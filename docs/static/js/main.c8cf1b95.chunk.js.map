{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAmB9C,OACE,cAAC,WAAD,UACE,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAShB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAtBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEL,SAASO,EAAT,GAAyC,EAAlBJ,GAAmB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAC/C,OACE,cAAC,WAAD,UACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SCHL,IAAMO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAY,IAAD,EACTd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAHuB,mBAC5BC,EAD4B,KACrBC,EADqB,KAmBnC,OAbCC,qBAAU,WAEPxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAEP,CAACpB,IAGEqB,EDjBiBM,CAAa3B,GAA/BO,EAD+B,EAC/BA,KAAMa,EADyB,EACzBA,QAEd,OACE,eAAC,WAAD,WACE,6BAAKpB,IACJoB,EAAU,aAAe,YAExB,qBAAKJ,UAAU,YAAf,SACGT,EAAKE,KAAI,SAACC,GACT,OAAO,cAACK,EAAD,eAA8BL,GAAZA,EAAIC,aEuB1BiB,EA/BM,WAAM,IAAD,EAGa1C,mBAAS,CAAC,cAHvB,mBAGhB2C,EAHgB,KAGJ5C,EAHI,KAUtB,OACI,eAAC,WAAD,WAEI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCpBjC8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.c8cf1b95.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault(); // evitar el comportamiento nativo de la caja de formularios\r\n\r\n      if(inputValue.trim().length >2){\r\n        setCategories(cats => [inputValue,...cats]);\r\n        setInputValue('');\r\n      }\r\n\r\n     \r\n\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        ></input>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n// validacion que obliga al desarrollador a proveer informacion o funcion  nensesaria al componente hijo \r\nAddCategory.propTypes ={\r\n    setCategories:PropTypes.func.isRequired \r\n}\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=2x8dP5j6083CsQX0SyLp6C9bxdTFFauF&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n \r\n  return gifs;\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nexport default function GifGridItem({ id, title, url }) {\r\n  return (\r\n    <Fragment>\r\n      <div className='card animate__animated animate__bounce'>\r\n        <img src={url} alt={title}></img>\r\n        <p>{title}</p>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>{category}</h3>\r\n      {loading ? \"Cargando..\" : \"Cargado..\"}\r\n      {\r\n        <div className=\"card-grid\">\r\n          {data.map((img) => {\r\n            return <GifGridItem key={img.id} {...img}></GifGridItem>;\r\n          })}\r\n        </div>\r\n      }\r\n    </Fragment>\r\n  );\r\n};\r\n","import React,{useState,useEffect} from 'react';\r\nimport {getGifs} from '../components/helpers/getGifs';\r\n\r\nexport const useFetchGifs =(category)=>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n     useEffect(() => {\r\n\r\n        getGifs(category).then(imgs => {\r\n            setTimeout(() => {\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n            }, 3000);\r\n        })\r\n     }, [category]);\r\n\r\n \r\n    return state;\r\n   \r\n}","// rafc es el comando para montar todo el app para exportar\r\n\r\nimport React,{Fragment, useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n  \r\n   const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // const handleAdd =() =>{\r\n  //     setCategories([...categories,'HunterXHunter']);\r\n  // }\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n\r\n            <h2>GifExpert</h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <hr></hr>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}>\r\n\r\n                        </GifGrid>)\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'; \n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}